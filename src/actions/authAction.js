import axios from 'axios';
import jwtDecode from 'jwt-decode';
import { SET_CURRENT_USER } from '../actions/actionTypes';

export function setCurrentUser(user, userId) {
  return {
    type: SET_CURRENT_USER,
    user,
    userId,
  };
}

export function logout() {
  return async dispatch => {
    await axios.post(process.env.SERVER_URL + '/api/logout', {
      accessToken: getJwtToken(),
      refreshToken: getRefreshToken(),
    });
    localStorage.removeItem('atk'); // rtk = access token
    localStorage.removeItem('rtk'); // rfk = refresh token
    dispatch(setCurrentUser({}, {}));
    window.location.reload(true);
  };
}

export function requestPasswordReset(data) {
  return async dispatch => {
    await axios.post(
      process.env.SERVER_URL + '/api/login/forgotpassword',
      data
    );
  };
}

export function resetPassword(data) {
  return async dispatch => {
    await axios.post(
      process.env.SERVER_URL + `/api/login/passwordreset/${data.token}`,
      data
    );
  };
}

// Change Password requires old password to be sent to server
export function changePassword(data) {
  return async () => {
    const response = await axios.post(
      process.env.SERVER_URL + '/api/login/changepassword',
      data
    );
    return response;
  };
}

export function activateAccount(token) {
  return async () => {
    const response = await axios.post(
      process.env.SERVER_URL + `/api/signup/activation/${token}`
    );
    return response;
  };
}

export function updateUserSettings(data) {
  return async dispatch => {
    await axios.post(
      process.env.SERVER_URL + `/api/usersettings/update`,
      data
    );
  };
}

export function login(data) {
  return async dispatch => {
    const response = await axios.post(
      process.env.SERVER_URL + '/api/login',
      data
    );
    const accessToken = response.data.accessToken;
    const refreshToken = response.data.refreshToken;
    saveJwtToken(accessToken);
    saveRefreshToken(refreshToken);
    dispatch(
      setCurrentUser(
        getUserNameFromToken(accessToken),
        getUserIdFromToken(accessToken)
      )
    );

    return Promise.resolve(response);
  };
}

export function signup(data) {
  return async dispatch => {
    const response = await axios.post(
      process.env.SERVER_URL + '/api/signup',
      data
    );
  };
}

export function isUserExists(data) {
  return () => {
    return axios.post(process.env.SERVER_URL + '/api/signup/checkuser', {
      username: data,
    });
  };
}

export function getUserNameFromToken(token) {
  var payload = jwtDecode(token);
  return payload['user'];
}

export function getUserIdFromToken(token) {
  var payload = jwtDecode(token);
  return payload['uid'];
}

export function getJwtToken() {
  return localStorage.getItem('atk');
}

export function getRefreshToken() {
  return localStorage.getItem('rtk');
}

export function saveJwtToken(token) {
  localStorage.setItem('atk', token);
}

export function saveRefreshToken(refreshToken) {
  localStorage.setItem('rtk', refreshToken);
}
