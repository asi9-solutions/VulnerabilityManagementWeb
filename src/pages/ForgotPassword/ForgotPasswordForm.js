import React from 'react';
import PropTypes from 'prop-types';
import { withRouter } from 'react-router-dom';
import TextFieldGroup from '../../components/TextFieldGroup';
import validateInput from '../../Validation/validateInputResetRequest';
import { connect } from 'react-redux';
import { requestPasswordReset } from '../../actions/authAction';

class ForgotPasswordForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      errors: {},
      responseMessage: '',
      isLoading: false,
    };

    this.onSubmit = this.onSubmit.bind(this);
    this.onChange = this.onChange.bind(this);
  }

  isValid() {
    const { errors, isValid } = validateInput(this.state);

    if (!isValid) {
      this.setState({ errors });
    }

    return isValid;
  }

  onSubmit(e) {
    e.preventDefault();
    if (this.isValid()) {
      this.setState({ errors: {}, isLoading: true });
      this.props.requestPasswordReset(this.state).then(
        res => {
          /*this.props.history.push("/login")*/
          this.setState({
            responseMessage:
              'Please check your email for password reset instructions.',
            isLoading: false,
            username: '',
          });
        },
        err =>
          this.setState({
            errors: err.response.data,
            isLoading: false,
          })
      );
    }
  }

  onChange(e) {
    this.setState({ [e.target.name]: e.target.value });
  }

  render() {
    const { errors, username, isLoading } = this.state;

    let credentialError, confirmationMessage;
    if (this.state.errors.length > 0) {
      credentialError = this.state.errors;
    }
    if (this.state.responseMessage.length > 0) {
      confirmationMessage = this.state.responseMessage;
    }

    return (
      <form onSubmit={this.onSubmit}>
        {credentialError && (
          <div className="alert alert-danger">{credentialError}</div>
        )}

        {confirmationMessage && (
          <div className="password-reset">{confirmationMessage}</div>
        )}

        <TextFieldGroup
          field="username"
          label="Email Address"
          value={username}
          error={errors.username}
          onChange={this.onChange}
        />

        <div className="form-group login-button-div">
          <button className="btn btn-primary btn-lg" disabled={isLoading}>
            Reset Password
          </button>
        </div>
        <div className="hyperlink-div">
          <a href="/login">Login</a>
        </div>
        <div className="hyperlink-div">
          <a href="/signup">Signup</a>
        </div>
      </form>
    );
  }
}

ForgotPasswordForm.propTypes = {
  requestPasswordReset: PropTypes.func.isRequired,
};

ForgotPasswordForm.contextTypes = {
  router: PropTypes.object.isRequired,
};

export default withRouter(
  connect(
    null,
    { requestPasswordReset }
  )(ForgotPasswordForm)
);
