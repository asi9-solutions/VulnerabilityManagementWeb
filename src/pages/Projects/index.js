import React from 'react';
import { Link } from 'react-router-dom';
import Loader from '../../components/Loader';
import NoLinkedDevice from '../../components/NoLinkedDevice';
import DefaultError from '../../components/DefaultError';
import ProjectApi from '../../api/ProjectApi';
import MaterialTable from 'material-table';
import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';
import DeleteProjectApi from '../../api/DeleteProjectApi';
import UpdateProjectApi from '../../api/UpdateProjectApi';
import UserRoleApi from '../../api/UserRoleApi';

class Projects extends React.Component {
  constructor(props, context) {
    super(props, context);
    this.state = {
      projects: [],
      selectedProjects: [],
      loading: true,
      hasError: false,
      error: '',
      isAdmin: false,
    };

    this.theme = createMuiTheme({
      palette: {
        primary: {
          main: '#D5E4F2',
        },
        secondary: {
          main: '#008080',
        },
      },
    });

    this.handler = this.handler.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  handler() {
    this.setState({
      maxfilecountreached: false,
      selectedProjects: [],
    });
  }

  handleClick = (e, rowData) => {
    e.preventDefault();
    var id = [];
    id.push(rowData.id);
    this.getFilePathForDownload(id, true);
  };

  async componentDidMount() {
    // Get User Role
    this._asyncEventsRequest = await UserRoleApi(this.props.userId)
    .then(data => {
      this.setState({ isAdmin: data });
    })
    .catch(serverError => {
      this.setState({ hasError: true, error: serverError });
    });

    // Get Projects
    this._asyncEventsRequest = await ProjectApi(this.props.userId)
      .then(data => {
        this.setState({ projects: data, loading: false });
      })
      .catch(serverError => {
        this.setState({ loading: false, hasError: true, error: serverError });
      });
  }

  render() {
    const {
      loading,
      error,
      hasError,
    } = this.state;

    if (this.state.projects === null || loading) {
      return <Loader />;
    }

    if (error.length > 0 || hasError) {
      if (error.response !== undefined) {
        return (
          <DefaultError error={JSON.stringify(error.response.statusText)} />
        );
      } else {
        return (
          <DefaultError error="Server temporarily unavailable for maintenance" />
        );
      }
    }

    if (
      this.state.projects !== null &&
      this.state.projects.length === 0 &&
      !loading
    ) {
      return <NoLinkedDevice message="No Projects" />;
    }

let control;

    if(this.state.isAdmin) {
      control = <MuiThemeProvider theme={this.theme}>
      <MaterialTable
        title="Projects"
        columns={[
          { title: 'Id', field: 'Id', editable: 'never'},
          { 
            title: 'Name', 
            field: 'Name',
            render: rowData => (
              <Link to={{
                pathname: '/vulnerabilities',
                state: {
                  projectId: rowData.Id,
                  projectName: rowData.Name
                }
              }}>{rowData.Name}</Link>
            ), 
          },
          { title: 'Status', field: 'Status', lookup: { 'Open': 'Open', 'Cloed': 'Closed', 'Cancelled': 'Cancelled' }, },
          { title: 'Lead', field: 'Lead' },
          { title: 'Due Date', field: 'DueDate', editable: 'never' },
        ]}
        data={this.state.projects}
        editable={{                
          onRowUpdate: (newData, oldData) =>
            new Promise((resolve, reject) => {
              setTimeout(() => {
                {
                  const data = this.state.projects;
                  const index = data.indexOf(oldData);
                  data[index] = newData;
                  data[index].LastEditedBy = this.props.user;    
                  UpdateProjectApi(data[index]);
                  this.setState({ data }, () => resolve());
                }
                resolve()
              }, 1000)
            }),
            onRowDelete: oldData =>
            new Promise((resolve, reject) => {
              setTimeout(() => {
                {
                  let data = this.state.projects;
                  const index = data.indexOf(oldData);
                  let removedRecord = data.splice(index, 1); 
                  removedRecord[0].LastEditedBy = this.props.user;               
                  DeleteProjectApi(removedRecord[0]);
                  this.setState({ data }, () => resolve());
                }
                resolve()
              }, 1000)
            }),
        }}
        options={{
          headerStyle: {
            backgroundColor: '#0F8F8F',
            fontWeight: 'bold',
            color: 'white',
            fontSize: '14px',
          },
          pageSize: 15,
          pageSizeOptions: [5, 15, 25, 50],
          selectionProps: rowData => ({
            disabled: rowData.filePath === '',
            color: 'primary',
          }),
        }}
      />
    </MuiThemeProvider>
    } else {
      control = <MuiThemeProvider theme={this.theme}>
      <MaterialTable
        title="Projects"
        columns={[
          { title: 'Id', field: 'Id', editable: 'never'},
          { 
            title: 'Name', 
            field: 'Name',
            render: rowData => (
              <Link to={{
                pathname: '/vulnerabilities',
                state: {
                  projectId: rowData.Id,
                  projectName: rowData.Name
                }
              }}>{rowData.Name}</Link>
            ), 
          },
          { title: 'Status', field: 'Status', lookup: { 'Open': 'Open', 'Cloed': 'Closed', 'Cancelled': 'Cancelled' }, },
          { title: 'Lead', field: 'Lead' },
          { title: 'Due Date', field: 'DueDate', editable: 'never' },
        ]}
        data={this.state.projects}
        options={{
          headerStyle: {
            backgroundColor: '#0F8F8F',
            fontWeight: 'bold',
            color: 'white',
            fontSize: '14px',
          },
          pageSize: 15,
          pageSizeOptions: [5, 15, 25, 50],
          selectionProps: rowData => ({
            disabled: rowData.filePath === '',
            color: 'primary',
          }),
        }}
      />
    </MuiThemeProvider>
    }

    return (
      <div>
        <div className="content-section implementation table-padding">
          {control}
        </div>
        <div className="table-padding">
          <span className="props bold">
            {this.state.projects.length} Project(s) Found
            
          </span>
        </div>
      </div>
    );
  }
}

export default Projects;
