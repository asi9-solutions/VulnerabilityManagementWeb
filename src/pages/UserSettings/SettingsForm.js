import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { InputMask } from 'primereact/inputmask';
import { updateUserSettings } from '../../actions/authAction';
import UserSettingsApi from '../../api/UserSettingsApi';
import Loader from '../../components/Loader';

class SettingsForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      uid: '',
      username: '',
      phonenumber: '',
      errors: {},
      loading: true,
      disabled: true,
      readonly: true,
      updating: false,
      emailnotification: false,
      smsnotification: false,
      message: '',
    };

    this.onSmsNotification = this.onSmsNotification.bind(this);
    this.onEmailNotification = this.onEmailNotification.bind(this);
  }

  onEmailNotification() {
    this.setState({ emailnotification: !this.state.emailnotification });
  }

  onSmsNotification() {
    this.setState({ smsnotification: !this.state.smsnotification });
  }

  updateSettings(e) {
    e.preventDefault();
    this.setState({ updating: true });
    this.props.updateUserSettings(this.state).then(
      () => {
        this.props.history.push('/usersettings');
        this.setState({ updating: false, message: 'Settings updated' });
      },
      err =>
        this.setState({
          errors: err.response.data,
          loading: false,
          updating: false,
        })
    );
  }

  async componentDidMount() {
    this._asyncEventsRequest = await UserSettingsApi(this.props.auth.userId)
      .then(data => {
        this.setState({
          loading: false,
          emailnotification: data.emailNotification,
          smsnotification: data.smsNotification,
          phonenumber: data.phoneNumber,
          username: data.userName,
          uid: data.id,
        });
      })
      .catch(serverError => {
        this.setState({ loading: false, error: serverError });
      });
  }

  render() {
    const { updating, loading, message } = this.state;

    let serverError;
    if (this.state.errors.length > 0) {
      serverError = this.state.errors;
    }

    let user = this.props.auth.user.toString();

    if (loading) {
      return <Loader />;
    }

    return (
      <div className="content">
        <div className="user-settings-header">{user}</div>

        {serverError && <div className="alert alert-danger">{serverError}</div>}
        {message && <div className="status-message">{message}</div>}

        <div className="setting-div-bottom-pad">
          <label className="label-name">User Name: </label>{' '}
          <label className="label-value">{this.state.username}</label>
        </div>
        <div className="div-bottom-pad">
          <label className="label-edit-name">Phone Number: </label>{' '}
          <InputMask
            mask="(999) 999-9999"
            value={this.state.phonenumber}
            placeholder="(999) 999 - 9999"
            onChange={e => this.setState({ phonenumber: e.value })}
          />
        </div>
        <div className="div-bottom-pad">
          <label className="switch-label">Email Notification:</label>
          <label>
            <input
              ref="switch"
              checked={this.state.emailnotification}
              onChange={this.onEmailNotification}
              className="switch"
              type="checkbox"
            />
            <div>
              <div />
            </div>
          </label>
        </div>
        <div className="div-bottom-pad">
          <label className="switch-label">SMS Notification:</label>
          &nbsp;&nbsp;
          <label>
            <input
              ref="switch"
              checked={this.state.smsnotification}
              onChange={this.onSmsNotification}
              className="switch"
              type="checkbox"
            />
            <div>
              <div />
            </div>
          </label>
        </div>
        <div className="form-group login-button-div">
          <button
            disabled={updating}
            className="btn btn-primary btn-lg"
            onClick={e => this.updateSettings(e)}
          >
            Save
          </button>
        </div>
        <div className="hyperlink-div">
          <a href="/projects">Cancel</a>
        </div>
      </div>
    );
  }
}

SettingsForm.propTypes = {
  auth: PropTypes.object.isRequired,
};

function mapStateToProps(state) {
  return {
    auth: state.Auth,
  };
}

SettingsForm.contextTypes = {
  router: PropTypes.object.isRequired,
};

export default withRouter(
  connect(
    mapStateToProps,
    { updateUserSettings }
  )(SettingsForm)
);
