import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { InputMask } from 'primereact/inputmask';
import validateInput from '../../Validation/validateInputSignup';
import TextFieldGroup from '../../components/TextFieldGroup';
import { signup, isUserExists } from '../../actions/authAction';

class SignupForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      firstname: '',
      lastname: '',
      phonenumber: '',
      password: '',
      passwordConfirmation: '',
      errors: {},
      isLoading: false,
      invalid: false,
    };

    this.onChange = this.onChange.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.checkUserExists = this.checkUserExists.bind(this);
  }

  onChange(e) {
    this.setState({ [e.target.name]: e.target.value });
  }

  isValid() {
    const { errors, isValid } = validateInput(this.state);

    if (!isValid) {
      this.setState({ errors });
    }

    return isValid;
  }

  checkUserExists(e) {
    const field = e.target.name;
    const val = e.target.value;
    if (val !== '') {
      this.props.isUserExists(val).then(res => {
        let errors = this.state.errors;
        let invalid;
        if (res.data) {
          errors[field] = 'Email address already registered';
          invalid = true;
        } else {
          errors[field] = '';
          invalid = false;
        }
        this.setState({ errors, invalid });
      });
    }
  }

  onSubmit(e) {
    e.preventDefault();

    if (this.isValid()) {
      this.setState({ errors: {}, isLoading: true });
      this.props.signup(this.state).then(
        () => {
          this.props.history.push('/confirmation');
        },
        err => this.setState({ errors: err.response.data, isLoading: false })
      );
    }
  }

  render() {
    const { errors } = this.state;

    return (
      <form onSubmit={this.onSubmit}>
        <TextFieldGroup
          error={errors.username}
          label="Email Address"
          onChange={this.onChange}
          checkUserExists={this.checkUserExists}
          value={this.state.username}
          field="username"
        />

        <TextFieldGroup
          error={errors.firstname}
          label="First Name"
          onChange={this.onChange}
          value={this.state.firstname}
          field="firstname"
        />

        <TextFieldGroup
          error={errors.lastname}
          label="Last Name"
          onChange={this.onChange}
          value={this.state.lastname}
          field="lastname"
        />

        <label className="control-label">Phone Number</label>
        <div className="div-bottom-pad">
          <InputMask
            mask="(999) 999-9999"
            value={this.state.phonenumber}
            placeholder="(999) 999-9999"
            onChange={e => this.setState({ phonenumber: e.value })}
          />
        </div>

        <TextFieldGroup
          error={errors.password}
          label="Password"
          onChange={this.onChange}
          value={this.state.password}
          field="password"
          type="password"
        />

        <div style={{ color: 'red' }} onChange={this.onChange}>
          {errors.passwordLength}
        </div>

        <TextFieldGroup
          error={errors.passwordConfirmation}
          label="Password Confirmation"
          onChange={this.onChange}
          value={this.state.passwordConfirmation}
          field="passwordConfirmation"
          type="password"
        />

        <div className="form-group login-button-div">
          <button
            disabled={this.state.isLoading || this.state.invalid}
            className="btn btn-primary btn-lg"
          >
            Sign up
          </button>
        </div>
        <div className="hyperlink-div">
          <a href="/login">Login</a>
        </div>
      </form>
    );
  }
}

SignupForm.propTypes = {
  signup: PropTypes.func.isRequired,
  isUserExists: PropTypes.func.isRequired,
};

SignupForm.contextTypes = {
  router: PropTypes.object.isRequired,
};

export default withRouter(
  connect(
    null,
    { signup, isUserExists }
  )(SignupForm)
);
