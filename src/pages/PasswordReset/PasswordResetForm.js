import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import validateInput from '../../Validation/validateInputResetSubmit';
import TextFieldGroup from '../../components/TextFieldGroup';
import { resetPassword } from '../../actions/authAction';

class PasswordResetForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      password: '',
      passwordConfirmation: '',
      token: '',
      errors: {},
      invalid: false,
    };

    this.onChange = this.onChange.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
  }

  onChange(e) {
    this.setState({ [e.target.name]: e.target.value });
  }

  isValid() {
    const { errors, isValid } = validateInput(this.state);

    if (!isValid) {
      this.setState({ errors });
    }

    return isValid;
  }

  onSubmit(e) {
    e.preventDefault();

    if (this.isValid()) {
      this.setState(
        {
          errors: {},
          isLoading: true,
          token: this.props.match.params.token,
        },
        function() {
          this.props.resetPassword(this.state).then(
            () => {
              this.props.addFlashMessage({
                type: 'success',
                text: 'Password reset!',
              });
              this.props.history.push('/login');
            },
            err => {
              this.setState({ errors: err.response.data, isLoading: false });
            }
          );
        }
      );
    }
  }

  render() {
    const { errors } = this.state;

    return (
      <form onSubmit={this.onSubmit}>
        <TextFieldGroup
          error={errors.password}
          label="New Password"
          onChange={this.onChange}
          value={this.state.password}
          field="password"
          type="password"
        />
        <div style={{ color: 'red' }} onChange={this.onChange}>
          {errors.passwordLength}
        </div>
        <TextFieldGroup
          error={errors.passwordConfirmation}
          label="Password Confirmation"
          onChange={this.onChange}
          value={this.state.passwordConfirmation}
          field="passwordConfirmation"
          type="password"
        />

        <div className="form-group login-button-div">
          <button
            disabled={this.state.isLoading || this.state.invalid}
            className="btn btn-primary btn-lg"
          >
            Update Password
          </button>
        </div>
      </form>
    );
  }
}

PasswordResetForm.propTypes = {
  resetPassword: PropTypes.func.isRequired,
  addFlashMessage: PropTypes.func.isRequired,
};

PasswordResetForm.contextTypes = {
  router: PropTypes.object.isRequired,
};

export default withRouter(
  connect(
    null,
    { resetPassword }
  )(PasswordResetForm)
);
