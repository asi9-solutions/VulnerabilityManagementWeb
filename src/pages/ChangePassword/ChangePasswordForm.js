import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import validateInput from '../../Validation/validateInputResetSubmit';
import TextFieldGroup from '../../components/TextFieldGroup';
import { changePassword } from '../../actions/authAction';

class ChangePasswordForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      Id: '',
      oldPassword: '',
      password: '',
      passwordConfirmation: '',
      message: '',
      errors: {},
      invalid: false,
    };

    this.onChange = this.onChange.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
  }

  onChange(e) {
    this.setState({ [e.target.name]: e.target.value });
  }

  isValid() {
    const { errors, isValid } = validateInput(this.state);

    if (!isValid) {
      this.setState({ errors });
    }

    return isValid;
  }

  onSubmit(e) {
    e.preventDefault();
    if (this.isValid()) {
      this.setState(
        {
          errors: {},
          isLoading: true,
          Id: this.props.auth.userId,
        },
        function() {
          this.props.changePassword(this.state).then(
            res => {
              if (res.status === 200) {
                this.setState({
                  message: 'Password updated',
                  errors: {},
                  isLoading: false,
                  password: '',
                  passwordConfirmation: '',
                  oldPassword: '',
                });
              }
            },
            err => {
              this.setState({
                errors: err.response.data,
                message: '',
                isLoading: false,
              });
            }
          );
        }
      );
    }
  }

  render() {
    const { errors, message } = this.state;

    let credentialError;
    if (this.state.errors.length > 0) {
      credentialError = this.state.errors;
    }

    return (
      <form onSubmit={this.onSubmit}>
        <div className="user-settings-header">Change Password</div>
        {credentialError && (
          <div className="alert alert-danger">{credentialError}</div>
        )}
        {message && <div className="status-message">{message}</div>}

        <TextFieldGroup
          error={errors.oldPassword}
          label="Old Password"
          onChange={this.onChange}
          value={this.state.oldPassword}
          field="oldPassword"
          type="password"
        />

        <TextFieldGroup
          error={errors.password}
          label="New Password"
          onChange={this.onChange}
          value={this.state.password}
          field="password"
          type="password"
        />
        <div style={{ color: 'red' }} onChange={this.onChange}>
          {errors.passwordLength}
        </div>
        <TextFieldGroup
          error={errors.passwordConfirmation}
          label="Password Confirmation"
          onChange={this.onChange}
          value={this.state.passwordConfirmation}
          field="passwordConfirmation"
          type="password"
        />

        <div className="form-group login-button-div">
          <button
            disabled={this.state.isLoading || this.state.invalid}
            className="btn btn-primary btn-lg"
          >
            Change Password
          </button>
        </div>
        <div className="hyperlink-div">
          <a href="/projects">Cancel</a>
        </div>
      </form>
    );
  }
}

ChangePasswordForm.propTypes = {
  changePassword: PropTypes.func.isRequired,
  auth: PropTypes.object.isRequired,
};

ChangePasswordForm.contextTypes = {
  router: PropTypes.object.isRequired,
};

function mapStateToProps(state) {
  return {
    auth: state.Auth,
  };
}

export default withRouter(
  connect(
    mapStateToProps,
    { changePassword }
  )(ChangePasswordForm)
);
