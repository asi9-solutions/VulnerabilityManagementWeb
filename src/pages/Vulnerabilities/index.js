import React from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import Loader from '../../components/Loader';
import NoLinkedDevice from '../../components/NoLinkedDevice';
import DefaultError from '../../components/DefaultError';
import MaterialTable from 'material-table';
import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';
import VulnerabilityApi from '../../api/VulnerabilityApi';
import UpdateVulnerabilityApi from '../../api/UpdateVulnerabilitiesApi';
import DeleteVulnerabilityApi from '../../api/DeleteVulnerabilitiesApi';
import UserRoleApi from '../../api/UserRoleApi';

class Vulnerabilities extends React.Component {
  constructor(props, context) {
    super(props, context);
    this.state = {
      vulnerabilities: [],
      selectedVulnerabilities: [],
      loading: true,
      hasError: false,
      error: '',
      projectid: 0,
      counter: 0,
      windowtitle: '',
      isAdmin: false,
    };

    this.theme = createMuiTheme({
      palette: {
        primary: {
          main: '#D5E4F2',
        },
        secondary: {
          main: '#008080',
        },
      },
    });
  }

  async componentDidMount() {
    var state = this.props.location.state;
    var projectId;
    if(state === undefined || state.projectId === undefined || state.projectId === null) {
      projectId = 0;
      this.setState({windowtitle: "All Vulnerabilities"})
    } else {
      projectId = state.projectId;
      this.setState({windowtitle: `Project ${state.projectName} Vulnerabilities`})
    }

    // Get User Role
    this._asyncEventsRequest = await UserRoleApi(this.props.userId)
    .then(data => {
      this.setState({ isAdmin: data });
    })
    .catch(serverError => {
      this.setState({ hasError: true, error: serverError });
    });

    // Get Vulnerabilities
    this._asyncEventsRequest = await VulnerabilityApi(projectId)
      .then(data => {
        this.setState({ vulnerabilities: data, loading: false });
      })
      .catch(serverError => {
        this.setState({ loading: false, hasError: true, error: serverError });
      });
  }

  render() {
    const {
      loading,
      error,
      hasError,
    } = this.state;

    if (this.state.vulnerabilities === null || loading) {
      return <Loader />;
    }

    if (error.length > 0 || hasError) {
      if (error.response !== undefined) {
        return (
          <DefaultError error={JSON.stringify(error.response.statusText)} />
        );
      } else {
        return (
          <DefaultError error="Server temporarily unavailable for maintenance" />
        );
      }
    }

    if (
      this.state.vulnerabilities !== null &&
      this.state.vulnerabilities.length === 0 &&
      !loading
    ) {
      return <NoLinkedDevice message="No Vulnerabilities found" />;
    }

    let control;
    // If Admin, display action buttons
    if(this.state.isAdmin) {
      control = <MuiThemeProvider theme={this.theme}>
      <MaterialTable
        title={this.state.windowtitle}
        columns={[
          { title: 'Id', field: 'Id', editable: 'never' },
          { title: 'Category', field: 'Category', editable: 'never' },
          { title: 'Location', field: 'Location', editable: 'never' },
          { title: 'Status', field: 'Status', editable: 'onUpdate', 
            lookup: { 'open': 'Open', 'fixed': 'Fixed', 'closed': 'Closed'} },
          { title: 'Severity', field: 'ToolGeneratedSeverity', editable: 'onUpdate', 
            lookup: { 'low': 'Low', 'medium': 'Medium', 'high': 'High', 'critical': 'Critical' } },
          { title: 'Rating', field: 'Rating', editable: 'onUpdate', 
            lookup: { 'low': 'Low', 'medium': 'Medium', 'high': 'High', 'critical': 'Critical' } },
          { title: 'Test Tool', field: 'TestTool', editable: 'never' },
          { title: 'Creation Date', field: 'CreatedDateTime' , editable: 'never'},
          {
            title: 'CWE', 
            editable: 'never',
            field: 'Cwe',
            render: rowData => (
              <a
                className="table-link"
                href={`https://cwe.mitre.org/data/definitions/${rowData.Cwe}.html`}
                target="_blank"
              >
                {rowData.Cwe}
              </a>
            ),
          },
        ]}
        data={this.state.vulnerabilities}
        editable={{                
          onRowUpdate: (newData, oldData) =>
            new Promise((resolve, reject) => {
              setTimeout(() => {
                {
                  const data = this.state.vulnerabilities;
                  const index = data.indexOf(oldData);
                  data[index] = newData;
                  data[index].LastEditedBy = this.props.user;    
                  UpdateVulnerabilityApi(data[index]);
                  this.setState({ data }, () => resolve());
                }
                resolve()
              }, 1000)
            }),
            onRowDelete: oldData =>
            new Promise((resolve, reject) => {
              setTimeout(() => {
                {
                  let data = this.state.vulnerabilities;
                  const index = data.indexOf(oldData);
                  let removedRecord = data.splice(index, 1); 
                  removedRecord[0].LastEditedBy = this.props.user;               
                  DeleteVulnerabilityApi(removedRecord[0]);
                  this.setState({ data }, () => resolve());
                }
                resolve()
              }, 1000)
            }),
        }}
        options={{
          headerStyle: {
            backgroundColor: '#0F8F8F',
            fontWeight: 'bold',
            color: 'white',
            fontSize: '14px',
          },
          pageSize: 15,
          pageSizeOptions: [5, 15, 25, 50],
        }}
      />
    </MuiThemeProvider>
    } else {
        control = <MuiThemeProvider theme={this.theme}>
        <MaterialTable
          title={this.state.windowtitle}
          columns={[
            { title: 'Id', field: 'Id', editable: 'never' },
            { title: 'Category', field: 'Category', editable: 'never' },
            { title: 'Location', field: 'Location', editable: 'never' },
            { title: 'Status', field: 'Status', editable: 'onUpdate', 
              lookup: { 'open': 'Open', 'fixed': 'Fixed', 'closed': 'Closed'} },
            { title: 'Severity', field: 'ToolGeneratedSeverity', editable: 'onUpdate', 
              lookup: { 'low': 'Low', 'medium': 'Medium', 'high': 'High', 'critical': 'Critical' } },
            { title: 'Rating', field: 'Rating', editable: 'onUpdate', 
              lookup: { 'low': 'Low', 'medium': 'Medium', 'high': 'High', 'critical': 'Critical' } },
            { title: 'Test Tool', field: 'TestTool', editable: 'never' },
            { title: 'Creation Date', field: 'CreatedDateTime' , editable: 'never'},
            {
              title: 'CWE', 
              editable: 'never',
              field: 'Cwe',
              render: rowData => (
                <a
                  className="table-link"
                  href={`https://cwe.mitre.org/data/definitions/${rowData.Cwe}.html`}
                  target="_blank"
                >
                  {rowData.Cwe}
                </a>
              ),
            },
          ]}
          data={this.state.vulnerabilities}
          options={{
            headerStyle: {
              backgroundColor: '#0F8F8F',
              fontWeight: 'bold',
              color: 'white',
              fontSize: '14px',
            },
            pageSize: 15,
            pageSizeOptions: [5, 15, 25, 50],
          }}
        />
      </MuiThemeProvider>
    }
    return (
      <div>
        <div className="content-section implementation table-padding">
          {control}
        </div>
        <div className="table-padding">
          <span className="props bold">
            {this.state.vulnerabilities.length} Vulnerabilities Found
          </span>
            </div>
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    auth: state.Auth,
  };
}

export default //Vulnerabilities;
withRouter(
  connect(
    mapStateToProps,
  )(Vulnerabilities)
);